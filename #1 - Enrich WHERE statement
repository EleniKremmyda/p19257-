class Database:
    def __init__(self):
        # Initialize the database with an empty dictionary to store tables
        self.tables = {}
    
    def create_table(self, table_name, columns):
        # Create a new table with the given name and columns, and store it in the tables dictionary
        self.tables[table_name] = Table(table_name, columns)
        
    def insert(self, table_name, values):
        # Insert values into the table with the given name
        self.tables[table_name].insert(values)
        
    def where(self, table_name, conditions):
        # Query the table with the given name using the WHERE statement with conditions
        return self.tables[table_name].where(conditions)
    
class Table:
    def __init__(self, name, columns):
        # Initialize a table with the given name and columns
        self.name = name
        self.columns = columns
        self.rows = []
        
    def insert(self, values):
        # Insert a row into the table
        if len(values) != len(self.columns):
            raise ValueError("Number of values does not match number of columns")
        row = {column: value for column, value in zip(self.columns, values)}
        self.rows.append(row)
        
    def where(self, conditions):
        # Filter the rows in the table based on the conditions in the WHERE statement
        results = []
        
        # Split the conditions by "AND" or "OR"
        conditions = [condition.strip() for condition in conditions.split('AND')]
        conditions = [condition.strip() for condition in conditions.split('OR')]
        
        # Iterate through each row in the table
        for row in self.rows:
            row_results = []
            # Evaluate each condition in the list of conditions
            for condition in conditions:
                if 'NOT' in condition:
                    # Handle the "NOT" operator
                    condition = condition.split('NOT')[1].strip()
                    row_result = not self.evaluate_condition(row, condition)
                elif 'BETWEEN' in condition:
                    # Handle the "BETWEEN" operator
                    condition = condition.split('BETWEEN')[1].strip()
                    values = condition.split('AND')
                    row_result = self.evaluate_between(row, values[0].strip(), values[1].strip())
                else:
                    # Evaluate a simple condition
                    row_result = self.evaluate_condition(row, condition)
                row_results.append(row_result)
                
            # Determine whether to include the row based on whether all or any of the conditions are met
            if all(row_results):
                results.append(row)
            elif any(row_results):
                results.append(row)
        return results
        
    def evaluate_condition(self, row, condition):
        # Evaluate a simple condition (e.g. column = value)
        column, operator, value = condition.split()
        row_value = row[column]
        if operator == '=':
            return row_value == value
        elif operator == '>':
            return row_value > value
        elif operator == '<':
            return row_value < value
        elif operator == '>=':
            return row_value >= value
        elif operator == '<=':
            return row_value <= value
        elif operator == '!=':
            return row_value != value
        else:
            raise ValueError("Invalid operator")

    def evaluate_between(self, row, value1, value2):
        # Evaluate a condition with the BETWEEN operator
        column = value1.split()[0]
        row_value = row[column]
        return value1 <= row_value <= value2
